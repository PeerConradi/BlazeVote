@page "/Manage"

@using BlazeVote.Data
@using BlazeVote.Hubs
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations.Schema
@using Microsoft.AspNetCore.Mvc.ModelBinding.Validation
@inject Services.VoteService VoteService
@inject ILocalStorageService localStore
@inject NavigationManager NavigationManager
<div class="row">
    <div class="col-12">
        <h1>Verwaltung</h1>
    </div>


</div>


<p>Auf dieser Ebene kannst du eine Umfragengruppe verwalten.</p>
@if (currentGroup == null)
{
    <div class="row">
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Neu erstellen</h5>
                    <p>Eine neue Gruppe erstellen um Abstimmungen durchführen zu können.</p>
                    <button class="btn btn-primary" @onclick="CreateGroup">Neue Gruppe erstellen</button>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Gruppe bearbeiten</h5>
                    @if (loginGroup != null)
                    {
                        <EditForm Model="@loginGroup" OnValidSubmit="CheckLogin">
                            <div class="form-group">
                                <label>Gruppen Id: </label>
                                <InputText class="form-control" @bind-Value="@loginGroup.Id"></InputText>
                            </div>

                            <div class="form-group">
                                <label>Secret </label>
                                <InputText class="form-control" @bind-Value="@loginGroup.Secret"></InputText>
                            </div>

                            <div class="form-group">
                                <button class="btn btn-success" type="submit">Einloggen</button>
                            </div>
                        </EditForm>
                    }

                </div>
            </div>
        </div>
    </div>
}

@if (currentGroup != null)
{
    <TabControl>
        <TabPage Text="Tab 1">
            <h1>The first tab</h1>
        </TabPage>
        <TabPage Text="Tab 2">
            <h1>The second tab</h1>
        </TabPage>
        <TabPage Text="Tab 3">
            <h1>The third tab</h1>
        </TabPage>
    </TabControl>

    <p>Deine Gruppe wurde angelegt, hier ein paar wichtige Daten: </p>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Wert</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Id</td>
                <td>@currentGroup.VoteGroupId</td>
            </tr>
            <tr>
                <td>Secret <small>Merken und unbedingt geheim halten!</small></td>
                <td>
                    @if (showSecret)
                    {
                        @currentGroup.Secret
                        <button class="btn btn-outline-primary" @onclick="@toggleShowSecret">Secret ausblenden</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="@toggleShowSecret">Secret anzeigen</button>
                    }
                </td>
            </tr>
        </tbody>
    </table>

    <h3>Öffentliche Schlüssel</h3>
    <p>
        Die öffentlichen Schlüssel sind dafür da an die Teilnehmenden rausgegeben zu werden. Diese können dann in sogenannte HiddenKeys (geheime Schlüssel) umgewandelt werden, mit welchen
        abgestimmt werden kann. Jeder Öffentliche Schlüssel kann nur ein mal umgewandelt werden. Ob ein öffentlicher Schlüssel umgewandelt wurde kann nachverfolgt werden, jedoch nicht
        in welchen geheimen Schlüssel.
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Schlüssel</th>
                <th>Vergeben</th>
                <th>Eingelöst</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in currentGroup.PublicKeys)
            {
                <tr>
                    <td>@entry.PublicKeyId</td>
                    <td>
                        <EditForm Model="@entry">
                            <InputCheckbox @bind-Value="@entry.GivenOut"></InputCheckbox>
                        </EditForm>
                    </td>
                    <td>
                        @if (entry.IsRegistered)
                        {
                            <b>Registriert</b>
                        }
                    </td>
                </tr>

            }
            <tr>
                <td colspan="3"><button class="btn btn-primary btn-block" @onclick="CreatePublicKey">Neu hinzufügen</button></td>
            </tr>
        </tbody>
    </table>

    <h3>Geheime Schlüssel</h3>
    <p>Die geheimen Schlüssel können für die Abstimmungen verwendet werden. Auf diese hat man keinen Einfluss mehr.</p>
    <p>Es wurden insgesamt: @currentGroup.HiddenKeys.Count geheime Schlüssel angefordert.</p>


    <div class="row">
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Abstimmungen</h5>
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Id</th>
                            <th>Frage</th>
                            <th>Status</th>
                            <th>Stimmen</th>
                            <th>OPT</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var vote in currentGroup.Votes)
                        {
                            <tr class="@GetTableClassByState(vote.State)">
                                <td>@vote.VoteQuestionId</td>
                                <td>@vote.Question</td>
                                <td>
                                    @vote.State.ToString()
                                </td>
                                <td>@vote.CountVotes().Sum(n =>n.Value)</td>
                                <td>
                                    <button class="btn btn-outline-primary">Details</button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Neue Abstimmung</h5>
                    <EditForm Model="@newQuestion" OnValidSubmit="AddQuestion">
                        <div class="form-group">
                            <label>Frage</label>
                            <InputText @bind-Value="newQuestion.Question" class="form-control"></InputText>
                        </div>
                        
                        @foreach (var answer in newQuestion.Options)
                        {
                            <div class="form-group">
                                <label>Antwort</label>
                                <InputText @bind-Value="answer.Text" class="form-control"></InputText>
                            </div>
                        }

                        <input type="button" class="btn btn-block btn-outline-success" @onclick="AddNewAnswerOption" novalidate="true" value="Antwort hinzufügen" />
                        
                        <h5>Einstellungen</h5>
                        <div class="form-group">
                            <label>
                                Erlaube mehrere Angaben
                                <InputCheckbox @bind-Value="newQuestion.AllowMultiple"></InputCheckbox>
                            </label>
                            
                        </div>
                        
                        <div class="form-group">
                            <button type="submit" class="btn btn-block btn-primary">Umfrage/Abstimmung anlegen</button>
                            <small>Die Umfrage wird erst einmal geschlossen sein und muss dann im nächsten Schritt geöffnet werden!</small>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {

    private HubConnection hubConnection;

    private class LoginToGroup
    {


        public string Id { get; set; }

        public bool IsValid { get; set; } = false;

        public string Secret { get; set; }
    }

    private VoteQuestion newQuestion = new VoteQuestion();

    private LoginToGroup loginGroup = new LoginToGroup();

    private bool showSecret = false;

    private void toggleShowSecret()
    {
        this.showSecret = !showSecret;
    }

    private string GetTableClassByState(VoteQuestion.VoteStates state)
    {
        switch (state)
        {
            case VoteQuestion.VoteStates.EDITING:
                return "table-info";
            case VoteQuestion.VoteStates.CLOSED:
                return "table-dark";
            case VoteQuestion.VoteStates.OPEN:
                return "table-warning";
            case VoteQuestion.VoteStates.FINISHED:
                return "table-success";
            default:
                return "";
        }
    }

    private VoteGroup currentGroup;

    public async void CreateGroup()
    {
        currentGroup = VoteService.GenerateNewVoteGroup();
        await localStore.SetItemAsync("blazeVoteGroupId", currentGroup.VoteGroupId);
        await localStore.SetItemAsync("blazeVoteGroupSecret", currentGroup.Secret);

        // Now try to join the Group!
        await hubConnection.SendAsync(VoteHub.JOIN_VOTE_GROUP, currentGroup.VoteGroupId, currentGroup.Secret);
    }

    public void CreatePublicKey()
    {
        if (currentGroup != null)
        {
            var key = VoteService.GeneratePublicKey(currentGroup);
            // This is not save at all, and should be replaced with SignalR Groups etc.
            // But just to check if it works I'll leave it in for now!
            hubConnection.SendAsync("AddPublicKey", currentGroup.VoteGroupId, key);
        }
    }

    public async void CheckLogin()
    {
        var group = VoteService.GetVoteGroup(loginGroup.Id);
        if (group != null)
        {
            if (group.Secret == loginGroup.Secret)
            {
                this.currentGroup = group;
                await localStore.SetItemAsync("blazeVoteGroupId", group.VoteGroupId);
                await localStore.SetItemAsync("blazeVoteGroupSecret", group.Secret);
            }
        }
    }

    public void AddNewAnswerOption()
    {
        newQuestion.Options.Add(new Answer());
    }

    public void AddQuestion()
    {
        if (currentGroup != null)
        {
            currentGroup.Votes.Add(newQuestion);
            newQuestion = new VoteQuestion();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/votehub"))
            .Build();


    // Init SignalR
        hubConnection.On<Data.PublicKey>(Hubs.VoteHub.ADD_PUBLIC_KEY, (publicKey) =>
        {
            if (currentGroup != null)
            {
                // Only add if its not already in there
                if (currentGroup.PublicKeys.All(n => n.PublicKeyId != publicKey.PublicKeyId))
                    currentGroup.PublicKeys.Add(publicKey);
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        // Check if the last given key is still valid.
        var id = await localStore.GetItemAsStringAsync("blazeVoteGroupId");
        var secret = await localStore.GetItemAsStringAsync("blazeVoteGroupSecret");
        if (!string.IsNullOrEmpty(id) && !string.IsNullOrEmpty(secret))
        {
            var group = VoteService.GetVoteGroup(id);
            if (group != null)
            {
                if (group.Secret == secret)
                {
                    // This Group seems to exists
                    this.currentGroup = group;

                    // Now try to join the Group!
                    await hubConnection.SendAsync(VoteHub.JOIN_VOTE_GROUP, currentGroup.VoteGroupId, currentGroup.Secret);
                }
            }
            else
            {
                // Delete the Secret because the key doesnt seems to be valid
                await localStore.RemoveItemAsync("blazeVoteGroupSecret");
            }
        }
    }
}
